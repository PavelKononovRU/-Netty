services:
  server:
    container_name: eureka
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - 8761:8761
  config:
    container_name: config
    build:
      context: ./config
      dockerfile: Dockerfile
    environment:
      - eureka.client.service-url.defaultZone=http://server:8761/eureka/
    depends_on:
      - server
    ports:
      - 8888:8888
  gateway-service:
    container_name: gateway
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    environment:
      - spring.application.name=gateway-service
      - spring.cloud.config.uri=http://config:8888
      - spring.cloud.config.profile=dev
      - spring.main.allow-bean-definition-overriding=true
      - spring.main.web-application-type=reactive
      - debug=true
    depends_on:
      config:
        condition:
          service_started
      keycloak:
        condition:
          service_healthy
    ports:
      - 8080:8080
  postgres:
    image: postgres
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
    ports:
      - 5432:5432
  quotes:
    build:
      context: ./quotes-api
      dockerfile: Dockerfile
    environment:
      - eureka.client.service-url.defaultZone=http://server:8761/eureka/
      - spring.config.import=optional:configserver:http://config:8888
      - spring.cloud.config.profile=dev
    depends_on:
      - gateway-service
      - postgres
  user-profile:
    build:
      context: ./user-profile
      dockerfile: Dockerfile
    environment:
      - eureka.client.service-url.defaultZone=http://server:8761/eureka/
      - spring.config.import=optional:configserver:http://config:8888
      - spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://host.docker.internal:8890/realms/project-realm/protocol/openid-connect/certs
      - spring.cloud.config.profile=dev
    depends_on:
      - gateway-service
      - postgres
  subscription:
    build:
      context: ./subscription
      dockerfile: Dockerfile
    environment:
      - eureka.client.service-url.defaultZone=http://server:8761/eureka/
      - spring.cloud.config.profile=dev
      - spring.config.import=optional:configserver:http://config:8888
      - spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://host.docker.internal:8890/realms/project-realm/protocol/openid-connect/certs
    depends_on:
      - gateway-service
      - postgres
  paying-service:
    build:
      context: ./paying-service
      dockerfile: Dockerfile
    environment:
     SPRING_APPLICATION_NAME: "paying-service"
     SPRING_CLOUD_CONFIG_URI: http://config:8888
     SPRING_CLOUD_CONFIG_PROFILE: "dev"
    depends_on:
      - gateway-service
      - postgres
  stub-payment:
    build:
      context: ./stub-payment
      dockerfile: Dockerfile
    environment:
      - eureka.client.service-url.defaultZone=http://server:8761/eureka/
      - spring.config.import=optional:configserver:http://config:8888
      - spring.cloud.config.profile=dev
    depends_on:
      - gateway-service
      - postgres
  rabbitmq:
    image: rabbitmq:3-management-alpine
    hostname: rabbitmq
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=rm
      - RABBITMQ_DEFAULT_PASS=rmp
    volumes:
      - ./rabbitmq:/var/lib/rabbitmq
    networks:
      - rabbitmq_go_net
    depends_on:
      - keycloak
    ports:
      - 15672:15672
  keycloak:
    image: quay.io/keycloak/keycloak:18.0.0
    command: ['start-dev --import-realm']
    volumes:
      - ./keycloak-server/realm-export.json:/opt/keycloak/data/import/realm-export.json
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres_keycloak
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KC_DB_SCHEMA: public
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8890:8080"
    depends_on:
      postgres_keycloak:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://keycloak:8080/realms/master"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 1m
    networks:
      - keycloak_dev_network
  postgres_keycloak:
    image: postgres
    command: postgres -c 'max_connections=200'
    volumes:
      - pgdata_keycloak:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    healthcheck:
      test: "exit 0"
    ports:
      - "5436:5432"
    networks:
      - keycloak_dev_network
volumes:
  pgdata_keycloak:
    name: keycloak_postgres_data
    driver: local
networks:
  keycloak_dev_network:
    driver: bridge
  rabbitmq_go_net:
    driver: bridge